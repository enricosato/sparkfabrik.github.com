<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tech @ SparkFabrik</title>
    <link>http://sparkfabrik.github.io/post/</link>
    <description>Recent content in Posts on Tech @ SparkFabrik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@sparkfabrik.com (Sparkfabrik)</managingEditor>
    <webMaster>info@sparkfabrik.com (Sparkfabrik)</webMaster>
    <lastBuildDate>Wed, 23 Mar 2016 16:31:55 +0000</lastBuildDate>
    <atom:link href="http://sparkfabrik.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello world</title>
      <link>http://sparkfabrik.github.io/post/hello-world/</link>
      <pubDate>Wed, 23 Mar 2016 16:31:55 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;Hello world, posts are coming.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**
 * Gathers a listing of links to nodes.
 *
 * @param $result
 *   A database result object from a query to fetch node entities. If your
 *   query joins the {node_comment_statistics} table so that the comment_count
 *   field is available, a title attribute will be added to show the number of
 *   comments.
 * @param $title
 *   A heading for the resulting list.
 *
 * @return
 *   A renderable array containing a list of linked node titles fetched from
 *   $result, or FALSE if there are no rows in $result.
 */
function node_title_list($result, $title = NULL) {
  $items = array();
  $num_rows = FALSE;
  foreach ($result as $node) {
    $items[] = l($node-&amp;gt;title, &#39;node/&#39; . $node-&amp;gt;nid, !empty($node-&amp;gt;comment_count) ? array(&#39;attributes&#39; =&amp;gt; array(&#39;title&#39; =&amp;gt; format_plural($node-&amp;gt;comment_count, &#39;1 comment&#39;, &#39;@count comments&#39;))) : array());
    $num_rows = TRUE;
  }

  return $num_rows ? array(&#39;#theme&#39; =&amp;gt; &#39;item_list__node&#39;, &#39;#items&#39; =&amp;gt; $items, &#39;#title&#39; =&amp;gt; $title) : FALSE;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;FROM alpine:3.3
MAINTAINER paolo.mainardi@sparkfabrik.com
RUN apk add --no-cache vim py-pip python &amp;amp;&amp;amp; \
  pip install Pygments

# Download and install hugo
ENV HUGO_VERSION 0.15
ENV HUGO_BINARY hugo_${HUGO_VERSION}_linux_amd64
ENV PS1=&#39;\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033[0m\] &#39;

ADD https://github.com/spf13/hugo/releases/download/v${HUGO_VERSION}/${HUGO_BINARY}.tar.gz /usr/local/
RUN tar xzf /usr/local/${HUGO_BINARY}.tar.gz -C /usr/local/ \
  &amp;amp;&amp;amp; ln -s /usr/local/${HUGO_BINARY}/${HUGO_BINARY} /usr/local/bin/hugo \
  &amp;amp;&amp;amp; rm /usr/local/${HUGO_BINARY}.tar.gz

# Create working directory
VOLUME /app
WORKDIR /app

# Add sources.
ADD src/ /app
ADD scripts/build.sh /usr/local/bin/build
RUN chmod +x /usr/local/bin/build

# By default, serve site.
EXPOSE 80
ENV HUGO_URL 0.0.0.0
ENV HUGO_PORT 80
CMD hugo server --bind ${HUGO_URL} --port=${HUGO_PORT} --buildDrafts --renderToDisk=true  --theme=spark --baseUrl=tech.sparkfabrik.loc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>